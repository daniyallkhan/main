import serial
import time
import numpy as np
from rplidar import RPLidar
import math
import heapq

# Set up RPLidar
PORT_NAME = '/dev/ttyUSB0'
lidar = RPLidar(PORT_NAME)

# Set up Serial Communication with Arduino
try:
    ser = serial.Serial('/dev/ttyAMA0', 115200, timeout=1)
except serial.SerialException as e:
    print(f"Serial connection failed: {e}")
    ser = None

def send_command(command):
    if ser:
        ser.write((command + '\n').encode())

def get_lidar_data():
    for scan in lidar.iter_scans():
        yield np.array(scan)

def polar_to_cartesian(angle, distance):
    x = distance * math.cos(math.radians(angle))
    y = distance * math.sin(math.radians(angle))
    return x, y

def obstacle_avoidance(scan_data):
    front_data = scan_data[(scan_data[:, 1] > 345) | (scan_data[:, 1] < 15)]  # Front region
    front_distances = front_data[:, 2]
    if len(front_distances) > 0 and np.min(front_distances) < 500:  # If an obstacle is closer than 500 mm
        send_command('STOP')
        time.sleep(1)
        send_command('TURN_LEFT')
    else:
        send_command('MOVE_FORWARD')

def astar_pathfinding(start, goal, obstacles):
    def heuristic(a, b):
        return math.sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2)

    open_set = []
    heapq.heappush(open_set, (0, start))
    came_from = {}
    g_score = {start: 0}
    f_score = {start: heuristic(start, goal)}

    while open_set:
        current = heapq.heappop(open_set)[1]
        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            return path[::-1]  # Return reversed path

        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:  # 4 possible directions
            neighbor = (current[0] + dx, current[1] + dy)
            if neighbor in obstacles:
                continue

            tentative_g_score = g_score[current] + 1
            if tentative_g_score < g_score.get(neighbor, float('inf')):
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                f_score[neighbor] = tentative_g_score + heuristic(neighbor, goal)
                heapq.heappush(open_set, (f_score[neighbor], neighbor))

    return []

def navigate_to_point(start, goal, obstacles):
    path = astar_pathfinding(start, goal, obstacles)
    for point in path:
        direction = calculate_direction(start, point)
        send_command(direction)
        start = point
        time.sleep(1)  # Wait for the robot to move

def calculate_direction(current, next_point):
    dx = next_point[0] - current[0]
    dy = next_point[1] - current[1]
    
    if dx > 0:
        return 'MOVE_RIGHT'
    elif dx < 0:
        return 'MOVE_LEFT'
    elif dy > 0:
        return 'MOVE_FORWARD'
    elif dy < 0:
        return 'MOVE_BACKWARD'
    return 'STOP'

def main():
    try:
        start = (0, 0)  # Initial position
        goal = (10, 10)  # Target position
        obstacles = set()

        for scan_data in get_lidar_data():
            for (_, angle, distance) in scan_data:
                if distance < 500:  # If an obstacle is closer than 500 mm
                    x, y = polar_to_cartesian(angle, distance)
                    obstacles.add((int(x), int(y)))
            navigate_to_point(start, goal, obstacles)
    except KeyboardInterrupt:
        print('Stopping...')
    finally:
        lidar.stop()
        lidar.disconnect()
        if ser:
            ser.close()

if __name__ == '__main__':
    main()
